---
- name: Configure portainer
  vars:
    portainer_api: https://portainer.{{ hostname }}/api
    validate_certs: "{{ not base_traefik_acme_staging }}"
    auth_header: Bearer {{ portainer_auth.json.jwt }}
  block:
    - name: Check admin user
      ansible.builtin.uri:
        url: "{{ portainer_api }}/users/admin/check"
        status_code: [204, 404]
        validate_certs: "{{ validate_certs }}"
      register: portainer_admin_check
      retries: 3
      delay: 10
      until: portainer_admin_check.failed == false

    - name: Create admin user
      when: portainer_admin_check.status != 204
      ansible.builtin.uri:
        method: POST
        url: "{{ portainer_api }}/users/admin/init"
        body_format: json
        body:
          username: "{{ portainer_admin_user }}"
          password: "{{ portainer_admin_password }}"
        validate_certs: "{{ validate_certs }}"
      no_log: true

    - name: Authenticate
      ansible.builtin.uri:
        method: POST
        url: "{{ portainer_api }}/auth"
        body_format: json
        body:
          username: "{{ portainer_admin_user }}"
          password: "{{ portainer_admin_password }}"
        validate_certs: "{{ validate_certs }}"
      no_log: true
      register: portainer_auth

    - name: Enable OpenID through Authelia
      ansible.builtin.uri:
        method: PUT
        url: "{{ portainer_api }}/settings"
        headers:
          authorization: "{{ auth_header }}"
        body_format: json
        body:
          authenticationMethod: 3
          oauthSettings:
            clientId: portainer
            clientSecret: "{{ portainer_authelia_secret }}"
            accessTokenUri: https://auth.{{ core_hostname }}/api/oidc/token
            authorizationUri: https://auth.{{ core_hostname }}/api/oidc/authorization
            resourceUri: https://auth.{{ core_hostname }}/api/oidc/userinfo
            redirectUri: https://portainer.{{ core_hostname }}
            userIdentifier: preferred_username
            scopes: openid profile groups email
            sso: true
            oauthAutoCreateUsers: false
        validate_certs: "{{ validate_certs }}"
      no_log: true

    - name: Get endpoints
      ansible.builtin.uri:
        url: "{{ portainer_api }}/endpoints"
        headers:
          authorization: "{{ auth_header }}"
        validate_certs: "{{ validate_certs }}"
      register: portainer_endpoints

    - name: Add local environment
      when: portainer_endpoints.json | json_query(jq) | length == 0
      vars:
        jq: "[?contains(URL, 'unix:///var/run/docker.sock')]"
      ansible.builtin.uri:
        method: POST
        url: "{{ portainer_api }}/endpoints"
        body_format: form-urlencoded
        body:
          Name: "{{ hostname }}"
          EndpointCreationType: "1"
          URL: unix:///var/run/docker.sock
        headers:
          authorization: "{{ auth_header }}"
        validate_certs: "{{ validate_certs }}"

    - name: Update agents
      vars:
        portainer_agents: "{{ groups['portainer'] | difference([ansible_hostname]) | product(['.' + domain]) | map('join') | list + portainer_extra_agents }}"
        jq: "[?Type == to_number('2')].{Id: Id, Name: Name, Type: Type, URL: URL}"
        agents: "{{ portainer_endpoints.json | json_query(jq) }}"
        agent_urls: "{{ ['tcp://'] | product(portainer_agents) | map('join') | list | product([':9001']) | map('join') | list }}"
      block:
        - name: Remove agent
          when: agent.URL not in agent_urls
          ansible.builtin.uri:
            method: DELETE
            url: "{{ portainer_api }}/endpoints/{{ agent.Id }}"
            headers:
              authorization: "{{ auth_header }}"
            status_code: [204, 404]
            validate_certs: "{{ validate_certs }}"
          loop: "{{ agents }}"
          loop_control:
            loop_var: agent

        - name: Add agent
          when: portainer_endpoints.json | json_query(jq) | length == 0
          vars:
            jq: "[?contains(URL, '{{ agent }}')]"
          ansible.builtin.uri:
            method: POST
            url: "{{ portainer_api }}/endpoints"
            body_format: form-urlencoded
            body:
              Name: "{{ agent }}"
              EndpointCreationType: "2"
              URL: tcp://{{ agent }}:9001
              TLS: "true"
              TLSSkipVerify: "true"
              TLSSkipClientVerify: "true"
            headers:
              authorization: "{{ auth_header }}"
            validate_certs: "{{ validate_certs }}"
          loop: "{{ portainer_agents }}"
          loop_control:
            loop_var: agent
