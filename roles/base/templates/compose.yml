version: "3"

services:
  traefik:
    container_name: traefik
    hostname: traefik
    image: traefik:{{ base_traefik_version }}
    restart: unless-stopped
    env_file:
      - traefik.env
    networks:
      - traefik
    ports:
      - "80:80"
      - "443:443"
      - "465:465"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik_secrets:/secrets:ro
      - traefik-letsencrypt:/letsencrypt
    labels:
      traefik.enable: "true"
      # Access to dashboard
      traefik.http.routers.traefik.rule: "Host(`traefik.{{ hostname }}`)"
      traefik.http.routers.traefik.entrypoints: https
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: authelia@docker
      # Access to metrics
      traefik.http.routers.traefik-metrics.rule: "Host(`traefik.{{ hostname }}`) && PathPrefix(`/metrics`)"
      traefik.http.routers.traefik-metrics.entrypoints: https
      traefik.http.routers.traefik-metrics.service: prometheus@internal
      # Authelia middlewares
      traefik.http.middlewares.authelia.forwardauth.address: "http://{{ core_hostname }}:9091/api/verify?rd=https://auth.{{ core_hostname }}"
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: "Remote-User,Remote-Groups,Remote-Name,Remote-Email"
      traefik.http.middlewares.authelia-basic.forwardauth.address: "http://{{ core_hostname }}:9091/api/verify?auth=basic"
      traefik.http.middlewares.authelia-basic.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authelia-basic.forwardauth.authResponseHeaders: "Remote-User,Remote-Groups,Remote-Name,Remote-Email"
      # homepage
      homepage.name: traefik
      homepage.group: traefik
      homepage.description: reverse proxy @ {{ ansible_hostname }}
      homepage.href: https://traefik.{{ hostname }}
      homepage.icon: traefik
      homepage.siteMonitor: https://traefik.{{ hostname }}

  diun:
    container_name: diun
    hostname: diun.{{ hostname }}
    image: crazymax/diun:{{ base_diun_version }}
    restart: unless-stopped
    command: serve
    environment:
      LOG_LEVEL: info
      LOG_JSON: "true"
    networks:
      - diun
    volumes:
      - ./diun.yml:/etc/diun/diun.yml
      - diun-data:/data
      - /var/run/docker.sock:/var/run/docker.sock

  docker_socket_proxy:
    container_name: docker_socket_proxy
    hostname: docker_socket_proxy
    image: tecnativa/docker-socket-proxy:{{ base_dsp_version }}
    restart: unless-stopped
    environment:
      CONTAINERS: 1
    networks:
      - docker
    ports:
      - "2375:2375"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  portainer_agent:
    container_name: portainer_agent
    hostname: portainer_agent
    image: portainer/agent:{{ base_portainer_agent_version }}
    restart: unless-stopped
    networks:
      - portainer
    ports:
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  node_exporter:
    container_name: node_exporter
    hostname: node_exporter
    image: quay.io/prometheus/node-exporter:{{ base_node_exporter_version }}
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes: 
      - '/:/host:ro,rslave'

networks:
  traefik:
    external: true
  diun: {}
  docker: {}
  portainer: {}

volumes:
  traefik-letsencrypt:
  diun-data:
