---
services:
  transmission:
    image: ghcr.io/linuxserver/transmission:{{ media_transmission_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      TRANSMISSION_WEB_HOME: /config/flood/flood-for-transmission
    networks:
      - traefik
    ports:
      - "51413:51413/tcp"
      - "51413:51413/udp"
    volumes:
      - ./transmission:/config
      - media:/media
    labels:
      traefik.enable: true
      traefik.http.services.transmission.loadbalancer.server.port: 9091
      traefik.http.routers.transmission.rule: Host(`transmission.{{ hostname }}`)
      traefik.http.routers.transmission.entrypoints: https
      traefik.http.routers.transmission.service: transmission
      traefik.http.routers.transmission.middlewares: authelia@docker
      homepage.name: transmission
      homepage.group: media
      homepage.href: https://transmission.{{ hostname }}
      homepage.description: torrent client
      homepage.icon: transmission
      homepage.siteMonitor: https://transmission.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  sonarr:
    image: ghcr.io/linuxserver/sonarr:{{ media_sonarr_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
    networks:
      - traefik
      - recyclarr
    volumes:
      - ./sonarr:/config
      - media:/media
    depends_on:
      - transmission
    labels:
      traefik.enable: true
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.rule: Host(`sonarr.{{ hostname }}`)
      traefik.http.routers.sonarr.entrypoints: https
      traefik.http.routers.sonarr.service: sonarr
      traefik.http.routers.sonarr.middlewares: authelia@docker
      traefik.http.services.sonarr-api.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr-api.rule: Host(`sonarr.{{ hostname }}`) && PathPrefix(`/api`)
      traefik.http.routers.sonarr-api.entrypoints: https
      traefik.http.routers.sonarr-api.service: sonarr-api
      homepage.name: sonarr
      homepage.group: media
      homepage.href: https://sonarr.{{ hostname }}
      homepage.description: manage tv series
      homepage.icon: sonarr
      homepage.siteMonitor: https://sonarr.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  radarr:
    image: ghcr.io/linuxserver/radarr:{{ media_radarr_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
    networks:
      - traefik
      - recyclarr
    volumes:
      - ./radarr:/config
      - media:/media
    depends_on:
      - transmission
    labels:
      traefik.enable: true
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.rule: Host(`radarr.{{ hostname }}`)
      traefik.http.routers.radarr.entrypoints: https
      traefik.http.routers.radarr.service: radarr
      traefik.http.routers.radarr.middlewares: authelia@docker
      traefik.http.services.radarr-api.loadbalancer.server.port: 7878
      traefik.http.routers.radarr-api.rule: Host(`radarr.{{ hostname }}`) && PathPrefix(`/api`)
      traefik.http.routers.radarr-api.entrypoints: https
      traefik.http.routers.radarr-api.service: radarr-api
      homepage.name: radarr
      homepage.group: media
      homepage.href: https://radarr.{{ hostname }}
      homepage.description: manage movies
      homepage.icon: radarr
      homepage.siteMonitor: https://radarr.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr:{{ media_recyclarr_version }}
    restart: unless-stopped
    pull_policy: always
    user: "{{ ansible_facts.user_uid }}:{{ ansible_facts.user_gid }}"
    read_only: true
    tmpfs: /tmp
    environment:
      TZ: "{{ timezone }}"
    networks:
      - recyclarr
    volumes:
      - ./recyclarr:/config
    depends_on:
      - sonarr
      - radarr
    labels:
      com.centurylinklabs.watchtower.enable: true

  lidarr:
    image: ghcr.io/linuxserver/lidarr:{{ media_lidarr_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
    networks:
      - traefik
    volumes:
      - ./lidarr:/config
      - media:/media
    depends_on:
      - transmission
    labels:
      traefik.enable: true
      traefik.http.services.lidarr.loadbalancer.server.port: 8686
      traefik.http.routers.lidarr.rule: Host(`lidarr.{{ hostname }}`)
      traefik.http.routers.lidarr.entrypoints: https
      traefik.http.routers.lidarr.service: lidarr
      traefik.http.routers.lidarr.middlewares: authelia@docker
      traefik.http.services.lidarr-api.loadbalancer.server.port: 8686
      traefik.http.routers.lidarr-api.rule: Host(`lidarr.{{ hostname }}`) && PathPrefix(`/api`)
      traefik.http.routers.lidarr-api.entrypoints: https
      traefik.http.routers.lidarr-api.service: lidarr-api
      homepage.name: lidarr
      homepage.group: media
      homepage.href: https://lidarr.{{ hostname }}
      homepage.description: manage music library
      homepage.icon: lidarr
      homepage.siteMonitor: https://lidarr.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  bazarr:
    image: ghcr.io/linuxserver/bazarr:{{ media_bazarr_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
    networks:
      - traefik
    volumes:
      - ./bazarr:/config
      - media:/media
    depends_on:
      - sonarr
      - radarr
    labels:
      traefik.enable: true
      traefik.http.services.bazarr.loadbalancer.server.port: 6767
      traefik.http.routers.bazarr.rule: Host(`bazarr.{{ hostname }}`)
      traefik.http.routers.bazarr.entrypoints: https
      traefik.http.routers.bazarr.service: bazarr
      traefik.http.routers.bazarr.middlewares: authelia@docker
      traefik.http.services.bazarr-api.loadbalancer.server.port: 6767
      traefik.http.routers.bazarr-api.rule: Host(`bazarr.{{ hostname }}`) && PathPrefix(`/api`)
      traefik.http.routers.bazarr-api.entrypoints: https
      traefik.http.routers.bazarr-api.service: bazarr-api
      homepage.name: bazarr
      homepage.group: media
      homepage.href: https://bazarr.{{ hostname }}
      homepage.description: manage subtitles
      homepage.icon: bazarr
      homepage.siteMonitor: https://bazarr.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:{{ media_prowlarr_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
    networks:
      - traefik
    volumes:
      - ./prowlarr:/config
    depends_on:
      - transmission
      - sonarr
      - radarr
      - lidarr
    labels:
      traefik.enable: true
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.{{ hostname }}`)
      traefik.http.routers.prowlarr.entrypoints: https
      traefik.http.routers.prowlarr.service: prowlarr
      traefik.http.routers.prowlarr.middlewares: authelia@docker
      traefik.http.services.prowlarr-api.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr-api.rule: Host(`prowlarr.{{ hostname }}`) && PathPrefix(`/api`)
      traefik.http.routers.prowlarr-api.entrypoints: https
      traefik.http.routers.prowlarr-api.service: prowlarr-api
      homepage.name: prowlarr
      homepage.group: media
      homepage.href: https://prowlarr.{{ hostname }}
      homepage.description: manage indexers
      homepage.icon: prowlarr
      homepage.siteMonitor: https://prowlarr.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  overseerr:
    image: ghcr.io/linuxserver/overseerr:{{ media_overseerr_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
    networks:
      - traefik
    volumes:
      - ./overseerr:/config
    depends_on:
      - sonarr
      - radarr
      - plex
    labels:
      traefik.enable: true
      traefik.http.services.overseerr.loadbalancer.server.port: 5055
      traefik.http.routers.overseerr.rule: Host(`overseerr.{{ hostname }}`)
      traefik.http.routers.overseerr.entrypoints: https
      traefik.http.routers.overseerr.service: overseerr
      homepage.name: overseerr
      homepage.group: media
      homepage.href: https://overseerr.{{ hostname }}
      homepage.description: request media
      homepage.icon: overseerr
      homepage.siteMonitor: https://overseerr.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  plex:
    image: ghcr.io/linuxserver/plex:{{ media_plex_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      PLEX_CLAIM: "{{ media_plex_claim }}"
      # {% if is_nvidia_container_runtime +%}
      NVIDIA_VISIBLE_DEVICES: all
      # {% endif +%}
    networks:
      - traefik
    ports:
      - "32400:32400"
      # - "1900:1900/udp"
      - "5353:5353/udp"
      - "8324:8324"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469"
    volumes:
      - ./plex:/config
      - media:/media
    # {% if is_nvidia_container_runtime +%}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # {% elif is_intel_cpu +%}
    devices:
      - /dev/dri:/dev/dri
    # {% endif +%}
    labels:
      traefik.enable: true
      traefik.http.services.plex.loadbalancer.server.port: 32400
      traefik.http.routers.plex.rule: Host(`plex.{{ hostname }}`)
      traefik.http.routers.plex.entrypoints: https
      traefik.http.routers.plex.service: plex
      homepage.name: plex
      homepage.group: media
      homepage.href: https://plex.{{ hostname }}
      homepage.description: media server
      homepage.icon: plex
      homepage.siteMonitor: https://plex.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

  jellyfin:
    image: ghcr.io/linuxserver/jellyfin:{{ media_jellyfin_version }}
    restart: unless-stopped
    pull_policy: always
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      JELLYFIN_PublishedServerUrl: jellyfin.{{ hostname }}
      # {% if is_nvidia_container_runtime +%}
      NVIDIA_VISIBLE_DEVICES: all
      # {% endif +%}
    networks:
      - traefik
    ports:
      - "8096:8096"
      - "1900:1900/udp"
      - "7359:7359/udp"
    volumes:
      - ./jellyfin:/config
      - media:/media
    # {% if is_nvidia_container_runtime +%}
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # {% elif is_intel_cpu +%}
    devices:
      - /dev/dri:/dev/dri
    # {% endif +%}
    labels:
      traefik.enable: true
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.{{ hostname }}`)
      traefik.http.routers.jellyfin.entrypoints: https
      traefik.http.routers.jellyfin.service: jellyfin
      homepage.name: jellyfin
      homepage.group: media
      homepage.href: https://jellyfin.{{ hostname }}
      homepage.description: media server
      homepage.icon: jellyfin
      homepage.siteMonitor: https://jellyfin.{{ hostname }}
      com.centurylinklabs.watchtower.enable: true

volumes:
  media:
    driver: local
    driver_opts:
      type: cifs
      device: "//{{ media_mount_host }}/{{ media_mount_path }}"
      o: user={{ media_mount_user }},pass={{ media_mount_password }},{{ media_mount_opts }}

networks:
  traefik:
    external: true
  recyclarr:
    name: recyclarr
