---
- name: Configure Radarr
  vars:
    radarr_api: https://radarr.{{ hostname }}/api/v3
    radarr_root_folder: /media/movies
    radarr_root_folder_query: "[?path == '{{ radarr_root_folder }}']"
    radarr_root_folder_set: "{{ radarr_get_root_folder_response.json | json_query(radarr_root_folder_query) | length > 0 }}"
    radarr_current_download_client: "{{ radarr_current_download_clients.json | json_query('[?implementation == `Transmission`]') }}"
    radarr_wanted_config:
      authenticationMethod: external
  block:
    - name: Ensure series directory exists
      community.docker.docker_container_exec:
        container: radarr
        command: mkdir -p {{ radarr_root_folder }}
      changed_when: false

    - name: Get config
      ansible.builtin.shell:
        executable: /usr/bin/bash
        cmd: |
          set -eo pipefail
          cat {{ media_deploy_path }}/radarr/config.xml | grep -i apikey | tr '<' '>' | cut -d '>' -f3
      changed_when: false
      register: radarr_api_key_result
      until: radarr_api_key_result.rc == 0 and radarr_api_key_result.stdout != ''

    - name: Export radarr api key
      ansible.builtin.set_fact:
        radarr_api_key: "{{ radarr_api_key_result.stdout }}"

    - name: Get root folder
      ansible.builtin.uri:
        method: GET
        url: "{{ radarr_api }}/rootFolder"
        headers:
          x-api-key: "{{ radarr_api_key }}"
        status_code: 200
      until: not radarr_get_root_folder_response.failed
      register: radarr_get_root_folder_response

    - name: Set root folder
      when: not radarr_root_folder_set
      ansible.builtin.uri:
        method: POST
        url: "{{ radarr_api }}/rootFolder"
        headers:
          x-api-key: "{{ radarr_api_key }}"
        body_format: json
        body:
          path: "{{ radarr_root_folder }}"
        status_code: 201
      until: not radarr_get_root_folder_response.failed

    - name: Get config
      ansible.builtin.uri:
        method: GET
        url: "{{ radarr_api }}/config/host"
        headers:
          x-api-key: "{{ radarr_api_key }}"
        status_code: 200
      register: radarr_current_config

    - name: Set config
      when: radarr_current_config.json != updated_config
      vars:
        updated_config: "{{ radarr_current_config.json | combine(radarr_wanted_config) }}"
      ansible.builtin.uri:
        method: PUT
        url: "{{ radarr_api }}/config/host"
        headers:
          x-api-key: "{{ radarr_api_key }}"
        body_format: json
        body: "{{ updated_config }}"
        status_code: 202

    - name: Get download clients
      ansible.builtin.uri:
        method: GET
        url: "{{ radarr_api }}/downloadclient"
        headers:
          x-api-key: "{{ radarr_api_key }}"
        status_code: 200
      register: radarr_current_download_clients

    - name: Create download client
      when: radarr_current_download_client | length == 0
      ansible.builtin.uri:
        method: POST
        url: "{{ radarr_api }}/downloadclient"
        headers:
          x-api-key: "{{ radarr_api_key }}"
        body_format: json
        body:
          enable: true
          protocol: torrent
          priority: 1
          removeCompletedDownloads: true
          removeFailedDownloads: true
          name: transmission
          fields:
            - name: host
              value: transmission
            - name: port
              value: 9091
            - name: useSsl
              value: false
            - name: urlBase
              value: /transmission/
            - name: movieCategory
              value: movies
            - name: recentMoviePriority
              value: 0
            - name: olderMoviePriority
              value: 0
            - name: addPaused
              value: false
          implementationName: Transmission
          implementation: Transmission
          configContract: TransmissionSettings
          tags: []
        status_code: 201
